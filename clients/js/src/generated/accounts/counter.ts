/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/web3.js';
import { CounterSeeds, findCounterPda } from '../pdas';
import { Key, getKeyDecoder, getKeyEncoder } from '../types';

export const COUNTER_KEY = Key.Counter;

export function getCounterKeyBytes() {
  return getKeyEncoder().encode(COUNTER_KEY);
}

export type Counter = { key: Key; authority: Address; value: number };

export type CounterArgs = { authority: Address; value: number };

export function getCounterEncoder(): Encoder<CounterArgs> {
  return transformEncoder(
    getStructEncoder([
      ['key', getKeyEncoder()],
      ['authority', getAddressEncoder()],
      ['value', getU32Encoder()],
    ]),
    (value) => ({ ...value, key: COUNTER_KEY })
  );
}

export function getCounterDecoder(): Decoder<Counter> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['authority', getAddressDecoder()],
    ['value', getU32Decoder()],
  ]);
}

export function getCounterCodec(): Codec<CounterArgs, Counter> {
  return combineCodec(getCounterEncoder(), getCounterDecoder());
}

export function decodeCounter<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Counter, TAddress>;
export function decodeCounter<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Counter, TAddress>;
export function decodeCounter<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Counter, TAddress> | MaybeAccount<Counter, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getCounterDecoder()
  );
}

export async function fetchCounter<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Counter, TAddress>> {
  const maybeAccount = await fetchMaybeCounter(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeCounter<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Counter, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeCounter(maybeAccount);
}

export async function fetchAllCounter(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Counter>[]> {
  const maybeAccounts = await fetchAllMaybeCounter(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeCounter(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Counter>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeCounter(maybeAccount));
}

export function getCounterSize(): number {
  return 37;
}

export async function fetchCounterFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: CounterSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<Counter>> {
  const maybeAccount = await fetchMaybeCounterFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeCounterFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: CounterSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<Counter>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findCounterPda(seeds, { programAddress });
  return await fetchMaybeCounter(rpc, address, fetchConfig);
}
