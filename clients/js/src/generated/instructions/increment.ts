/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  none,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlySignerAccount,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/web3.js';
import { findCounterPda } from '../pdas';
import { COUNTER_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INCREMENT_DISCRIMINATOR = 1;

export function getIncrementDiscriminatorBytes() {
  return getU8Encoder().encode(INCREMENT_DISCRIMINATOR);
}

export type IncrementInstruction<
  TProgram extends string = typeof COUNTER_PROGRAM_ADDRESS,
  TAccountCounter extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountCounter extends string
        ? WritableAccount<TAccountCounter>
        : TAccountCounter,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type IncrementInstructionData = {
  discriminator: number;
  amount: Option<number>;
};

export type IncrementInstructionDataArgs = {
  amount?: OptionOrNullable<number>;
};

export function getIncrementInstructionDataEncoder(): Encoder<IncrementInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['amount', getOptionEncoder(getU32Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: INCREMENT_DISCRIMINATOR,
      amount: value.amount ?? none(),
    })
  );
}

export function getIncrementInstructionDataDecoder(): Decoder<IncrementInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['amount', getOptionDecoder(getU32Decoder())],
  ]);
}

export function getIncrementInstructionDataCodec(): Codec<
  IncrementInstructionDataArgs,
  IncrementInstructionData
> {
  return combineCodec(
    getIncrementInstructionDataEncoder(),
    getIncrementInstructionDataDecoder()
  );
}

export type IncrementAsyncInput<
  TAccountCounter extends string = string,
  TAccountAuthority extends string = string,
> = {
  /** The program derived address of the counter account to increment (seeds: ['counter', authority]) */
  counter?: Address<TAccountCounter>;
  /** The authority of the counter */
  authority: TransactionSigner<TAccountAuthority>;
  amount?: IncrementInstructionDataArgs['amount'];
};

export async function getIncrementInstructionAsync<
  TAccountCounter extends string,
  TAccountAuthority extends string,
  TProgramAddress extends Address = typeof COUNTER_PROGRAM_ADDRESS,
>(
  input: IncrementAsyncInput<TAccountCounter, TAccountAuthority>,
  config?: { programAddress?: TProgramAddress }
): Promise<
  IncrementInstruction<TProgramAddress, TAccountCounter, TAccountAuthority>
> {
  // Program address.
  const programAddress = config?.programAddress ?? COUNTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    counter: { value: input.counter ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.counter.value) {
    accounts.counter.value = await findCounterPda({
      authority: expectAddress(accounts.authority.value),
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.counter),
      getAccountMeta(accounts.authority),
    ],
    programAddress,
    data: getIncrementInstructionDataEncoder().encode(
      args as IncrementInstructionDataArgs
    ),
  } as IncrementInstruction<
    TProgramAddress,
    TAccountCounter,
    TAccountAuthority
  >;

  return instruction;
}

export type IncrementInput<
  TAccountCounter extends string = string,
  TAccountAuthority extends string = string,
> = {
  /** The program derived address of the counter account to increment (seeds: ['counter', authority]) */
  counter: Address<TAccountCounter>;
  /** The authority of the counter */
  authority: TransactionSigner<TAccountAuthority>;
  amount?: IncrementInstructionDataArgs['amount'];
};

export function getIncrementInstruction<
  TAccountCounter extends string,
  TAccountAuthority extends string,
  TProgramAddress extends Address = typeof COUNTER_PROGRAM_ADDRESS,
>(
  input: IncrementInput<TAccountCounter, TAccountAuthority>,
  config?: { programAddress?: TProgramAddress }
): IncrementInstruction<TProgramAddress, TAccountCounter, TAccountAuthority> {
  // Program address.
  const programAddress = config?.programAddress ?? COUNTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    counter: { value: input.counter ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.counter),
      getAccountMeta(accounts.authority),
    ],
    programAddress,
    data: getIncrementInstructionDataEncoder().encode(
      args as IncrementInstructionDataArgs
    ),
  } as IncrementInstruction<
    TProgramAddress,
    TAccountCounter,
    TAccountAuthority
  >;

  return instruction;
}

export type ParsedIncrementInstruction<
  TProgram extends string = typeof COUNTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The program derived address of the counter account to increment (seeds: ['counter', authority]) */
    counter: TAccountMetas[0];
    /** The authority of the counter */
    authority: TAccountMetas[1];
  };
  data: IncrementInstructionData;
};

export function parseIncrementInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedIncrementInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      counter: getNextAccount(),
      authority: getNextAccount(),
    },
    data: getIncrementInstructionDataDecoder().decode(instruction.data),
  };
}
